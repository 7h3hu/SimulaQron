
SimulaQron - simple quantum network simulator
=============================================

The purpose of this simulator of quantum network nodes is to allow you to develop new applications for
a future quantum internet, while of course right now we do not yet have real quantum network nodes available for testing.

Documentation and examples are explained in the html documentation docs/_build/html/index.html

Important design information
=============================

This simulator consists of two parts and has a relatively modular design:

1] Virtual quantum nodes

The first part sets up virtual quantum network nodes which simulate qubits for you. Each node presents
a number of virtual qubits for you to use. These virtual qubits would correspond to the physical qubits
available at this node, would this be a real physical implementation of the quantum network node. The
client part (see below), may manipulate these qubits as if they were local physical qubit and also 
instruct to send them to remote nodes. The virtual nodes consists of a number of servers identified
by their common names (eg Alice, Bob, Charlie) which connect to each other to form a virtual simulation
network as a backend.

As you know, entangled qubits cannot be locally represented by any form of classical information (hence
the quantum advantage of entanglement in the first place!). As such, if two (or more) nodes share
qubits which are somehow entangled with each other, then these qubits will actually be simulated
at just one of these nodes. That it, they appear to be virtually local (as if they were real physical
qubits), yet they are actually simulated at just one of the network nodes. As you might imagine, 
this also means that if we want to perform an entangling gate to two qubits which are virtually
local, but actually simulated in two different backend quantum registers, then a merge of these
registers is required before the entangling gate can be exectuted. This is all handled transparently 
by the backend provided here.

As a guide to the backend, it consists of three essential components:
- quantumEngine - the one used here is implemented as simpleEngine in crudeSimulator.py which uses
  quTip as a backend. This corresponds to one quantum register full of qubits across which gates
  can be performed.

- qubits - for each qubit simulated in that register, there is a qubit object. This is local to each
  node. It exports remote method calls. These methods are only called by the virtual node network itself:
  when a virtual node discovers the qubit is actually simulated remotely, it passes on this call 
  by calling the relevant method on the remote qubit object.

- virtualQubit - this is the object representing a virtually local qubit. This carries information
  about the remote simulating qubit. These virtualQubit objects can in turn be accessed by the clients
  who can access these virtual qubits as if they were real local physical qubits without having to know
  where they are actually simulated. That is, the client obtains a pointer to the relevant virtual
  qubit object on which it can perform operations directly.

- virtualNode - this is the local virtual node which accepts requests to get a virtual qubit object,
  send qubits to other nodes, or (for convenience sake), read out the state of qubits.

- backEnd - starts up the virtual node backend

2] The local client engine

The second part is a framework for writing applications that use the virtually simulated quantum 
network. These applications use a client and server architecture for sending classical control information to
each other. All applications can be written simply by filling in the relevant parts of the template
found in examples/template. See also the examples/ and tests/ folder for many examples on how precisely 
this is done. Instructions on how to fill in the template are given in the examples/template/ files.


How to use
==========

First you need to make sure you have the following installed: Python 3, Twisted and QuTip. Assuming you have
python 3 etc already installed already, do
pip install twisted
pip install qutip

You need to set the following environment variables in order to execute the code. I am assuming here
you use bash (eg standard on OSX), otherwise set the same variables using your favorite shell.

export NETSIM=yourPath/SimulaQron
export PYTHONPATH=yourPath

where yourPath is the directory containing SimulaQron.

Configuration files are in config:

virtualNodes.cfg   - this file defines which virtualNodes to start up and what their names are. The example
		     runs them all locally, but you can as well run them on remote hosts by using one such file
		     on each host.
classicalNet.cfg   - this file defines which nodes act as servers in the classical communication network
		     listening for control information to execute the protocol. You want to copy this to whatever
		     example you are running. 

To start the virtual nodes according to the configuration file above, execute (in directory SimulaQron)

sh run/startVNodes.sh

After all nodes have started, you may want to run a very simple test to convince yourself it's all working. 
For example, why not go teleport a qubit?

cd examples/teleport
sh doNew.sh

Other examples and tests can be run analogously. To write your own, see examples/template or learn from the examples!

